Ship its own version of tsearch and friends if not provided by platform.

On GNU based systems the tree related functions (tsearch, tfind, tdestroy)
are provided by the libc (with the interface specification in search.h). On
non-GNU systems this functionality may or may not be available. That's the
case for Android which ships its own, simplified, version of libc called
Bionic. Bionic does not contains neither search.h nor an implementation of
the above mentioned functions.

This patch adds detection for the presence of search.h and if the header file
is not found, it uses an internal version of search.h and functions tsearch,
tfind, and tdestroy. The internal version is based on the source code from
FreeBSD and is compiled if and only if the configure script did not find the
search.h header file.
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/include/platform.h
===================================================================
--- libmicrohttpd.orig/libmicrohttpd-0.9.22/src/include/platform.h
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/include/platform.h
@@ -53,8 +53,10 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <signal.h>
-#if !defined(MINGW) && !defined(__SYMBIAN32__)
+#if HAVE_SEARCH_H
 #include <search.h>
+#else
+#include "tsearch.h"
 #endif
 #include <stddef.h>
 #undef HAVE_CONFIG_H
Index: libmicrohttpd/libmicrohttpd-0.9.22/configure.ac
===================================================================
--- libmicrohttpd.orig/libmicrohttpd-0.9.22/configure.ac
+++ libmicrohttpd/libmicrohttpd-0.9.22/configure.ac
@@ -184,6 +184,8 @@ AC_CHECK_HEADERS([fcntl.h math.h errno.h
 # Check for optional headers
 AC_CHECK_HEADERS([sys/types.h sys/time.h sys/msg.h netdb.h netinet/in.h netinet/tcp.h time.h sys/socket.h sys/mman.h arpa/inet.h sys/select.h poll.h winsock2.h ws2tcpip.h])
 
+AC_CHECK_HEADERS([search.h], AM_CONDITIONAL(HAVE_TSEARCH, true), AM_CONDITIONAL(HAVE_TSEARCH, false))
+
 # Check for plibc.h from system, if not found, use our own
 AC_CHECK_HEADERS([plibc.h],our_private_plibc_h=0,our_private_plibc_h=1)
 AM_CONDITIONAL(USE_PRIVATE_PLIBC_H, test x$our_private_plibc_h = x1)    
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/Makefile.am
===================================================================
--- libmicrohttpd.orig/libmicrohttpd-0.9.22/src/daemon/Makefile.am
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/Makefile.am
@@ -29,6 +29,11 @@ if USE_COVERAGE
   AM_CFLAGS = --coverage
 endif
 
+if !HAVE_TSEARCH
+libmicrohttpd_la_SOURCES += \
+  tsearch.c
+endif
+
 if HAVE_POSTPROCESSOR
 libmicrohttpd_la_SOURCES += \
   postprocessor.c
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/daemon.c
===================================================================
--- libmicrohttpd.orig/libmicrohttpd-0.9.22/src/daemon/daemon.c
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/daemon.c
@@ -289,7 +289,7 @@ MHD_ip_limit_add(struct MHD_Daemon *daem
   MHD_ip_count_lock (daemon);
 
   /* Search for the IP address */
-  if (NULL == (nodep = TSEARCH (key, 
+  if (NULL == (nodep = tsearch (key, 
 				&daemon->per_ip_connection_count, 
 				&MHD_ip_addr_compare)))
     {
@@ -345,7 +345,7 @@ MHD_ip_limit_del(struct MHD_Daemon *daem
   MHD_ip_count_lock (daemon);
 
   /* Search for the IP address */
-  if (NULL == (nodep = TFIND (&search_key, 
+  if (NULL == (nodep = tfind (&search_key, 
 			      &daemon->per_ip_connection_count, 
 			      &MHD_ip_addr_compare)))
     {      
@@ -362,7 +362,7 @@ MHD_ip_limit_del(struct MHD_Daemon *daem
   /* Remove the node entirely if count reduces to 0 */
   if (0 == --found_key->count)
     {
-      TDELETE (found_key, 
+      tdelete (found_key, 
 	       &daemon->per_ip_connection_count, 
 	       &MHD_ip_addr_compare);
       free (found_key);
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/tsearch.c
===================================================================
--- /dev/null
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/daemon/tsearch.c
@@ -0,0 +1,121 @@
+/*	$NetBSD: tsearch.c,v 1.3 1999/09/16 11:45:37 lukem Exp $	*/
+
+/*
+ * Tree search generalized from Knuth (6.2.2) Algorithm T just like
+ * the AT&T man page says.
+ *
+ * The node_t structure is for internal use only, lint doesn't grok it.
+ *
+ * Written by reading the System V Interface Definition, not the code.
+ *
+ * Totally public domain.
+ */
+
+#include <sys/cdefs.h>
+#define _SEARCH_PRIVATE
+#include <tsearch.h>
+#include <stdlib.h>
+
+/* find or insert datum into search tree */
+void *
+tsearch(vkey, vrootp, compar)
+	const void *vkey;		/* key to be located */
+	void **vrootp;			/* address of tree root */
+	int (*compar)(const void *, const void *);
+{
+	node_t *q;
+	node_t **rootp = (node_t **)vrootp;
+
+	if (rootp == NULL)
+		return NULL;
+
+	while (*rootp != NULL) {	/* Knuth's T1: */
+		int r;
+
+		if ((r = (*compar)(vkey, (*rootp)->key)) == 0)	/* T2: */
+			return *rootp;		/* we found it! */
+
+		rootp = (r < 0) ?
+		    &(*rootp)->llink :		/* T3: follow left branch */
+		    &(*rootp)->rlink;		/* T4: follow right branch */
+	}
+
+	q = malloc(sizeof(node_t));		/* T5: key not found */
+	if (q != 0) {				/* make new node */
+		*rootp = q;			/* link new node to old */
+		/* LINTED const castaway ok */
+		q->key = (void *)vkey;		/* initialize new node */
+		q->llink = q->rlink = NULL;
+	}
+	return q;
+}
+
+/* find a node, or return 0 */
+void *
+tfind(vkey, vrootp, compar)
+	const void *vkey;		/* key to be found */
+	void * const *vrootp;		/* address of the tree root */
+	int (*compar)(const void *, const void *);
+{
+	node_t **rootp = (node_t **)vrootp;
+
+	if (rootp == NULL)
+		return NULL;
+
+	while (*rootp != NULL) {		/* T1: */
+		int r;
+
+		if ((r = (*compar)(vkey, (*rootp)->key)) == 0)	/* T2: */
+			return *rootp;		/* key found */
+		rootp = (r < 0) ?
+		    &(*rootp)->llink :		/* T3: follow left branch */
+		    &(*rootp)->rlink;		/* T4: follow right branch */
+	}
+	return NULL;
+}
+
+/*
+ * delete node with given key
+ *
+ * vkey:   key to be deleted
+ * vrootp: address of the root of the tree
+ * compar: function to carry out node comparisons
+ */
+void *
+tdelete(const void * __restrict vkey, void ** __restrict vrootp,
+    int (*compar)(const void *, const void *))
+{
+	node_t **rootp = (node_t **)vrootp;
+	node_t *p, *q, *r;
+	int cmp;
+
+	if (rootp == NULL || (p = *rootp) == NULL)
+		return NULL;
+
+	while ((cmp = (*compar)(vkey, (*rootp)->key)) != 0) {
+		p = *rootp;
+		rootp = (cmp < 0) ?
+		    &(*rootp)->llink :		/* follow llink branch */
+		    &(*rootp)->rlink;		/* follow rlink branch */
+		if (*rootp == NULL)
+			return NULL;		/* key not found */
+	}
+	r = (*rootp)->rlink;			/* D1: */
+	if ((q = (*rootp)->llink) == NULL)	/* Left NULL? */
+		q = r;
+	else if (r != NULL) {			/* Right link is NULL? */
+		if (r->llink == NULL) {		/* D2: Find successor */
+			r->llink = q;
+			q = r;
+		} else {			/* D3: Find NULL link */
+			for (q = r->llink; q->llink != NULL; q = r->llink)
+				r = q;
+			r->llink = q->rlink;
+			q->llink = (*rootp)->llink;
+			q->rlink = (*rootp)->rlink;
+		}
+	}
+	free(*rootp);				/* D4: Free node */
+	*rootp = q;				/* link parent to new node */
+	return p;
+}
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/include/Makefile.am
===================================================================
--- libmicrohttpd.orig/libmicrohttpd-0.9.22/src/include/Makefile.am
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/include/Makefile.am
@@ -1,4 +1,4 @@
 SUBDIRS = plibc .
 include_HEADERS = microhttpd.h
 
-EXTRA_DIST = platform.h 
+EXTRA_DIST = platform.h tsearch.h
Index: libmicrohttpd/libmicrohttpd-0.9.22/src/include/tsearch.h
===================================================================
--- /dev/null
+++ libmicrohttpd/libmicrohttpd-0.9.22/src/include/tsearch.h
@@ -0,0 +1,39 @@
+/*-
+ * Written by J.T. Conklin <jtc@netbsd.org>
+ * Public domain.
+ *
+ *	$NetBSD: search.h,v 1.12 1999/02/22 10:34:28 christos Exp $
+ * $FreeBSD: release/9.0.0/include/search.h 105250 2002-10-16 14:29:23Z robert $
+ */
+
+#ifndef _SEARCH_H_
+#define _SEARCH_H_
+
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+typedef	enum {
+	preorder,
+	postorder,
+	endorder,
+	leaf
+} VISIT;
+
+#ifdef _SEARCH_PRIVATE
+typedef	struct node {
+	char         *key;
+	struct node  *llink, *rlink;
+} node_t;
+#endif
+
+__BEGIN_DECLS
+void	*tdelete(const void * __restrict, void ** __restrict,
+	    int (*)(const void *, const void *));
+void	*tfind(const void *, void * const *,
+	    int (*)(const void *, const void *));
+void	*tsearch(const void *, void **, int (*)(const void *, const void *));
+void	 twalk(const void *, void (*)(const void *, VISIT, int));
+void	 tdestroy(void *, void (*)(void *));
+__END_DECLS
+
+#endif /* !_SEARCH_H_ */
